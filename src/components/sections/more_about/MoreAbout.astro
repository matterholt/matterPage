---
import { getCollection } from "astro:content";
import { definedContentOrder } from "@utils/helpers";
import { Text, Box, LinkBreak } from "@components/lib_comps/index";
import { SectionContainer } from "@components/blocks";
import { BottomCurve, TopCurve } from "@components/svg";

import Card from "./components/card/Card.astro";

const aboutMe = await getCollection("about", ({ data }) => {
  return data.isPublish === true;
});

const inOrder = aboutMe.sort(definedContentOrder);

function sortThingsOut(notes) {
  const rightside = notes.filter((x) => x.data.order % 2 === 1);
  const leftSide = notes.filter((x) => x.data.order % 2 === 0);
  return { rightside, leftSide };
}

// loop through and then
const { rightside, leftSide } = sortThingsOut(inOrder);

function columnSort(entryNumb) {
  return entryNumb % 2 ? "card_columns-right" : "card_columns-left";
}
---

<Box
  varient="dark"
  Cssvars={{ sectionMarginControl: "0px 0px" }}
  class:list={["card_collections"]}
>
  <div class="curvit-top">
    <BottomCurve />
  </div>

  <Text tag="h2" class="header_position">
    Bit more <LinkBreak>about me</LinkBreak>
  </Text>

  <div class="card_columns-left card_columns_layout">
    {
      leftSide.map((entry) => (
        <Card asignChar={entry.data.largeLetter}>
          <Text slot="role_title" tag="h3" name="role_title">
            {entry.data.title}
          </Text>
          <Text tag="p">{entry.body}</Text>
        </Card>
      ))
    }
  </div>

  <div class="card_columns-right card_columns_layout">
    {
      rightside.map((entry) => (
        <Card asignChar={entry.data.largeLetter}>
          <Text slot="role_title" tag="h3">
            {entry.data.title}
          </Text>
          <Text tag="p">{entry.body}</Text>
        </Card>
      ))
    }
  </div>

  <div class="curveit-bottom">
    <TopCurve />
  </div>
</Box>

<style>
  .header_position {
    margin-left: 70px;
    text-transform: capitalize;
    letter-spacing: 2px;
  }
  .card_collections {
    overflow: hidden;
    display: grid;
    width: 100%;
    grid-template-columns: 1fr 1fr;

    grid-template-rows: 90px 150px 1fr 90px;
    grid-template-areas:
      "cutout_top cutout_top"
      "title right_column"
      "left_column right_column"
      "cutout-bottom cutout-bottom";
  }
  .card_columns-right {
    grid-area: right_column;
    margin-top: var(--card_columns-right_margin-top, 40px);
    padding-right: var(--card_columns-right_padding-right, 30px);
  }
  .card_columns-left {
    grid-area: left_column;
    padding-left: var(--card_columns-left_padding-left, 30px);
  }

  .card_columns_layout {
    display: flex;
    flex-direction: column;
    row-gap: 20px;
    margin-bottom: var(--card_columns_layout-margin-bottom, 50px);
  }
  .curvit-top {
    grid-area: cutout_top;
  }
  .curveit-bottom {
    grid-area: cutout-bottom;
  }
  @media screen and (max-width: 768px) {
    .card_collections {
      --card_columns-left_padding-left: 0px;
      --card_columns-right_padding-right: 0px;
      --card_columns-right_margin-top: 0px;
      --card_columns_layout-margin-bottom: 0px;
      grid-template-columns: 100vw;
      grid-template-rows: 90px 150px 1fr 1.7fr 90px;
      grid-template-areas:
        "cutout_top "
        "title "
        "left_column"
        "right_column"
        "cutout-bottom";
    }
  }
</style>
